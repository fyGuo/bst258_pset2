summary(dta$stab_ipw)
hist(dta$stab_ipw, main = "Distribution of Stabilized Weights", xlab = "Stabilized Weights")
library(survey)
# unstabilized ipw
fit_unstab <- svyglm(wt82_71 ~ qsmk, family = "gaussian",
design = svydesign(ids = ~seqn, weights = ~unstab_ipw, data = dta))
summary(fit_unstab)
# stabilized ipw
fit_stab <- svyglm(wt82_71 ~ qsmk, family = "gaussian",
design = svydesign(ids = ~seqn, weights = ~stab_ipw, data = dta))
summary(fit_stab)
library(sandwich)
# unstabilized ipw
fit_unstab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =unstab_ipw, data = dta)
vcov <- sandwich(fit_unstab)
coef(fit_unstab)["qsmk"] + c(-1,1)*1.96*sqrt(vcov["qsmk", "qsmk"])
# stabilized ipw
fit_stab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =stab_ipw, data = dta)
vcov <- sandwich(fit_stab)
coef(fit_stab)["qsmk"] + c(-1,1)*1.96*sqrt(vcov["qsmk", "qsmk"])
# fit an outcome model as required
fit_outcome <- lm(wt82_71  ~ qsmk + qsmk:smokeintensity+ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = dta)
# generate prediction where everyone has qsmk = 1 and qsmk 0 respectively
newdata1 <- dta %>% select(-wt82_71) %>% mutate(qsmk = 1)
newdata0 <- dta %>% select(-wt82_71) %>% mutate(qsmk = 0)
# get predictions
dta$Y_pred1 <- predict(fit_outcome, newdata1)
dta$Y_pred0 <- predict(fit_outcome, newdata0)
dta %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 - Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar))
dta %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 - Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar),
dr_se - sd(newvar))
dta %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 - Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar),
dr_se = sd(newvar))
W <- dta %>% select(smokeintensity, sex, age,race , education, smokeintensity, smokeyrs , active, exercise, wt71 )
Y <- dta$wt82_71
A <- dta$qsmk
glm_fit_uni <- drtmle(W = W, A = A, Y = Y, family = gaussian(),
glm_g = "sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) ",
glm_Q = "A + A:smokeintensity+ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2)",
glm_gr = "Qn", glm_Qr = "gn", stratify = FALSE)
glm_fit_uni
glm_fit_uni$drtmle
glm_fit_uni$drtmle$est
glm_fit_uni$drtmle$est
glm_fit_uni$drtmle
vcov <- glm_fit_uni$drtmle$cov
est
est <- glm_fit_uni$drtmle$est
vcov <- glm_fit_uni$drtmle$cov
est
# estimate the doubly robust estimator
est[2]-est[1]
# standard erros
t(c(-1,1)) %*% vcov %*% t((-1,1))
# standard erros
t(c(-1,1)) %*% vcov %*% c(-1,1)
# standard errors
sqrt(t(c(-1,1)) %*% vcov %*% c(-1,1))
# 95% CI
point+c(-1,1)*1.96*se
point <- est[2]-est[1]
point
# standard errors
se <- sqrt(t(c(-1,1)) %*% vcov %*% c(-1,1))
se
# 95% CI
point+c(-1,1)*1.96*se
dta %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 - Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar),
se_est = sd(newvar)/sqrt(dim(dta)[1]))
point
se
# 95% CI
point+c(-1,1)*1.96*se
library(tidyverse)
# read data from the downloaded csv fike
dta <- read.csv("data/nhefs.csv")
# Include observation with measured body weight at 1982
dta <- dta %>% filter(!is.na(wt82))
# check the number of observations
dim(dta)
# fit a logistic regression for conditional probability of qsmk
fit_qsmk <- glm(qsmk ~ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = dta, family = binomial)
fit_qsmk%>% summary()
# calculate the predicted probability of qsmk = 1
p_qsmk1 <- predict(fit_qsmk, dta, type = "response")
dta$p_qsmk1 <- p_qsmk1
# calculate the probability of qsmk = 1 for stabilized weights
p <- mean(dta$qsmk)
# generate unstabilized weights and stabilized weights
dta$unstab_ipw <- ifelse(dta$qsmk == 1, 1/p_qsmk1, 1/(1-p_qsmk1))
dta$stab_ipw <- ifelse(dta$qsmk == 1, p/p_qsmk1, (1-p)/(1-p_qsmk1))
# distribution of unstabilized weights
summary(dta$unstab_ipw)
hist(dta$unstab_ipw, main = "Distribution of Unstabilized Weights", xlab = "Unstabilized Weights")
# distribution of stabilized weights
summary(dta$stab_ipw)
hist(dta$stab_ipw, main = "Distribution of Stabilized Weights", xlab = "Stabilized Weights")
library(survey)
# unstabilized ipw
fit_unstab <- svyglm(wt82_71 ~ qsmk, family = "gaussian",
design = svydesign(ids = ~seqn, weights = ~unstab_ipw, data = dta))
summary(fit_unstab)
# stabilized ipw
fit_stab <- svyglm(wt82_71 ~ qsmk, family = "gaussian",
design = svydesign(ids = ~seqn, weights = ~stab_ipw, data = dta))
summary(fit_stab)
library(sandwich)
# unstabilized ipw
fit_unstab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =unstab_ipw, data = dta)
vcov <- sandwich(fit_unstab)
coef(fit_unstab)["qsmk"] + c(-1,1)*1.96*sqrt(vcov["qsmk", "qsmk"])
# stabilized ipw
fit_stab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =stab_ipw, data = dta)
vcov <- sandwich(fit_stab)
coef(fit_stab)["qsmk"] + c(-1,1)*1.96*sqrt(vcov["qsmk", "qsmk"])
# fit an outcome model as required
fit_outcome <- lm(wt82_71  ~ qsmk + qsmk:smokeintensity+ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = dta)
# generate prediction where everyone has qsmk = 1 and qsmk 0 respectively
newdata1 <- dta %>% select(-wt82_71) %>% mutate(qsmk = 1)
newdata0 <- dta %>% select(-wt82_71) %>% mutate(qsmk = 0)
# get predictions
dta$Y_pred1 <- predict(fit_outcome, newdata1)
dta$Y_pred0 <- predict(fit_outcome, newdata0)
bootstrap_function <- function(sim_id, data) {
rows <- sample(1:dim(data)[1], size = dim(data)[1], replace = TRUE)
data_boot <- data[rows, ]
# fit model for g(L)
fit_qsmk <- glm(qsmk ~ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot, family = binomial)
# get prediction for g(L)
# calculate the predicted probability of qsmk = 1
data_boot$p_qsmk1 <- predict(fit_qsmk, data_boot, type = "response")
# fit model for m1(L) and m0(L)
fit_outcome <- lm(wt82_71  ~ qsmk + qsmk:smokeintensity+ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot,)
# generate prediction where everyone has qsmk = 1 and qsmk 0 respectively
newdata1 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 1)
newdata0 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 0)
# get predictions
data_boot$Y_pred1 <- predict(fit_outcome, newdata1)
data_boot$Y_pred0 <- predict(fit_outcome, newdata0)
# get doubly-robust estimator
p_qsmk1 <- predict(fit_qsmk, data, type = "response")
data$unstab_ipw <- ifelse(data$qsmk == 1, 1/p_qsmk1, 1/(1-p_qsmk1))
data$stab_ipw <- ifelse(data$qsmk == 1, p/p_qsmk1, (1-p)/(1-p_qsmk1))
result <- data_boot %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 -Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar))
dr_est <- result
# get IPW estimators using stabilized weights and unstabilized weights
# unstabilized ipw
fit_unstab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =unstab_ipw, data = data)
ipw_unstab <- coef(fit_unstab)["qsmk"]
# stabilized ipw
fit_stab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =stab_ipw, data = dta)
ipw_stab <- coef(fit_stab)["qsmk"]
data.frame(dr_est = dr_est, ipw_unstab = ipw_unstab, ipw_stab = ipw_stab) %>%
return()
}
library(furrr)
plan("multisession")
set.seed(123)
result <- future_map_dfr(1:1000, ~bootstrap_function(.x, dta),
.options = furrr_options(seed = TRUE))
# O
point_estimate <- mean(result$dr_est)
point_estimate
se_estimate <- sd(result$dr_est)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
result
bootstrap_function <- function(sim_id, data) {
rows <- sample(1:dim(data)[1], size = dim(data)[1], replace = TRUE)
data_boot <- data[rows, ]
# fit model for g(L)
fit_qsmk <- glm(qsmk ~ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot, family = binomial)
# get prediction for g(L)
# calculate the predicted probability of qsmk = 1
data_boot$p_qsmk1 <- predict(fit_qsmk, data_boot, type = "response")
# fit model for m1(L) and m0(L)
fit_outcome <- lm(wt82_71  ~ qsmk + qsmk:smokeintensity+ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot,)
# generate prediction where everyone has qsmk = 1 and qsmk 0 respectively
newdata1 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 1)
newdata0 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 0)
# get predictions
data_boot$Y_pred1 <- predict(fit_outcome, newdata1)
data_boot$Y_pred0 <- predict(fit_outcome, newdata0)
# get doubly-robust estimator
p_qsmk1 <- predict(fit_qsmk, data, type = "response")
data$unstab_ipw <- ifelse(data$qsmk == 1, 1/p_qsmk1, 1/(1-p_qsmk1))
data$stab_ipw <- ifelse(data$qsmk == 1, p/p_qsmk1, (1-p)/(1-p_qsmk1))
result <- data_boot %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 -Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar))
dr_est <- result
# get IPW estimators using stabilized weights and unstabilized weights
# unstabilized ipw
fit_unstab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =unstab_ipw, data = data)
ipw_unstab <- coef(fit_unstab)["qsmk"]
# stabilized ipw
fit_stab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =stab_ipw, data = data)
ipw_stab <- coef(fit_stab)["qsmk"]
data.frame(dr_est = dr_est, ipw_unstab = ipw_unstab, ipw_stab = ipw_stab) %>%
return()
}
library(furrr)
plan("multisession")
set.seed(123)
result <- future_map_dfr(1:1000, ~bootstrap_function(.x, dta),
.options = furrr_options(seed = TRUE))
# DR-estimator
point_estimate <- mean(result$dr_est)
point_estimate
se_estimate <- sd(result$dr_est)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with unstabilized weights
point_estimate <- mean(result$ipw_unstab)
point_estimate
result$ipw_unstab == result$ipw_stab
se_estimate
se_estimate <- sd(result$ipw_unstab)
se_estimate
# DR-estimator
point_estimate <- mean(result$dr_est)
point_estimate
se_estimate <- sd(result$dr_est)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with unstabilized weights
point_estimate <- mean(result$ipw_unstab)
point_estimate
se_estimate <- sd(result$ipw_unstab)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with stabilized weights
point_estimate <- mean(result$ipw_stab)
point_estimate
se_estimate <- sd(result$ipw_stab)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
bootstrap_function <- function(sim_id, data) {
rows <- sample(1:dim(data)[1], size = dim(data)[1], replace = TRUE)
data_boot <- data[rows, ]
# fit model for g(L)
fit_qsmk <- glm(qsmk ~ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot, family = binomial)
# get prediction for g(L)
# calculate the predicted probability of qsmk = 1
data_boot$p_qsmk1 <- predict(fit_qsmk, data_boot, type = "response")
# fit model for m1(L) and m0(L)
fit_outcome <- lm(wt82_71  ~ qsmk + qsmk:smokeintensity+ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot,)
# generate prediction where everyone has qsmk = 1 and qsmk 0 respectively
newdata1 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 1)
newdata0 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 0)
# get predictions
data_boot$Y_pred1 <- predict(fit_outcome, newdata1)
data_boot$Y_pred0 <- predict(fit_outcome, newdata0)
result <- data_boot %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 -Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar))
dr_est <- result
# get doubly-robust estimator
data_boot$unstab_ipw <- ifelse(data_boot$qsmk == 1, 1/p_qsmk1, 1/(1-p_qsmk1))
data_boot$stab_ipw <- ifelse(data_boot$qsmk == 1, p/p_qsmk1, (1-p)/(1-p_qsmk1))
# get IPW estimators using stabilized weights and unstabilized weights
# unstabilized ipw
fit_unstab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =unstab_ipw, data = data_boot)
ipw_unstab <- coef(fit_unstab)["qsmk"]
# stabilized ipw
fit_stab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =stab_ipw, data = data_boot)
ipw_stab <- coef(fit_stab)["qsmk"]
data.frame(dr_est = dr_est, ipw_unstab = ipw_unstab, ipw_stab = ipw_stab) %>%
return()
}
library(furrr)
plan("multisession")
set.seed(123)
result <- future_map_dfr(1:1000, ~bootstrap_function(.x, dta),
.options = furrr_options(seed = TRUE))
# DR-estimator
point_estimate <- mean(result$dr_est)
point_estimate
se_estimate <- sd(result$dr_est)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with unstabilized weights
point_estimate <- mean(result$ipw_unstab)
point_estimate
se_estimate <- sd(result$ipw_unstab)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with stabilized weights
point_estimate <- mean(result$ipw_stab)
point_estimate
se_estimate <- sd(result$ipw_stab)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
point_estimate
# IPW-estimator with unstabilized weights
point_estimate <- mean(result$ipw_unstab)
point_estimate
se_estimate <- sd(result$ipw_unstab)
se_estimate
# IPW-estimator with unstabilized weights
point_estimate <- mean(result$ipw_unstab)
point_estimate
se_estimate <- sd(result$ipw_unstab)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with stabilized weights
point_estimate <- mean(result$ipw_stab)
point_estimate
# DR-estimator
point_estimate <- mean(result$dr_est)
point_estimate
bootstrap_function <- function(sim_id, data) {
rows <- sample(1:dim(data)[1], size = dim(data)[1], replace = TRUE)
data_boot <- data[rows, ]
# fit model for g(L)
fit_qsmk <- glm(qsmk ~ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot, family = binomial)
# get prediction for g(L)
# calculate the predicted probability of qsmk = 1
data_boot$p_qsmk1 <- predict(fit_qsmk, data_boot, type = "response")
# fit model for m1(L) and m0(L)
fit_outcome <- lm(wt82_71  ~ qsmk + qsmk:smokeintensity+ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot,)
# generate prediction where everyone has qsmk = 1 and qsmk 0 respectively
newdata1 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 1)
newdata0 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 0)
# get predictions
data_boot$Y_pred1 <- predict(fit_outcome, newdata1)
data_boot$Y_pred0 <- predict(fit_outcome, newdata0)
result <- data_boot %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 -Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar))
dr_est <- result
# get doubly-robust estimator
p <- mean(dta_boot$qsmk)
data_boot$unstab_ipw <- ifelse(data_boot$qsmk == 1, 1/p_qsmk1, 1/(1-p_qsmk1))
data_boot$stab_ipw <- ifelse(data_boot$qsmk == 1, p/p_qsmk1, (1-p)/(1-p_qsmk1))
# get IPW estimators using stabilized weights and unstabilized weights
# unstabilized ipw
fit_unstab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =unstab_ipw, data = data_boot)
ipw_unstab <- coef(fit_unstab)["qsmk"]
# stabilized ipw
fit_stab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =stab_ipw, data = data_boot)
ipw_stab <- coef(fit_stab)["qsmk"]
data.frame(dr_est = dr_est, ipw_unstab = ipw_unstab, ipw_stab = ipw_stab) %>%
return()
}
library(furrr)
plan("multisession")
set.seed(123)
result <- future_map_dfr(1:1000, ~bootstrap_function(.x, dta),
.options = furrr_options(seed = TRUE))
bootstrap_function <- function(sim_id, data) {
rows <- sample(1:dim(data)[1], size = dim(data)[1], replace = TRUE)
data_boot <- data[rows, ]
# fit model for g(L)
fit_qsmk <- glm(qsmk ~ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot, family = binomial)
# get prediction for g(L)
# calculate the predicted probability of qsmk = 1
data_boot$p_qsmk1 <- predict(fit_qsmk, data_boot, type = "response")
# fit model for m1(L) and m0(L)
fit_outcome <- lm(wt82_71  ~ qsmk + qsmk:smokeintensity+ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot,)
# generate prediction where everyone has qsmk = 1 and qsmk 0 respectively
newdata1 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 1)
newdata0 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 0)
# get predictions
data_boot$Y_pred1 <- predict(fit_outcome, newdata1)
data_boot$Y_pred0 <- predict(fit_outcome, newdata0)
result <- data_boot %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 -Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar))
dr_est <- result
# get doubly-robust estimator
p <- mean(data_boot$qsmk)
data_boot$unstab_ipw <- ifelse(data_boot$qsmk == 1, 1/p_qsmk1, 1/(1-p_qsmk1))
data_boot$stab_ipw <- ifelse(data_boot$qsmk == 1, p/p_qsmk1, (1-p)/(1-p_qsmk1))
# get IPW estimators using stabilized weights and unstabilized weights
# unstabilized ipw
fit_unstab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =unstab_ipw, data = data_boot)
ipw_unstab <- coef(fit_unstab)["qsmk"]
# stabilized ipw
fit_stab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =stab_ipw, data = data_boot)
ipw_stab <- coef(fit_stab)["qsmk"]
data.frame(dr_est = dr_est, ipw_unstab = ipw_unstab, ipw_stab = ipw_stab) %>%
return()
}
library(furrr)
plan("multisession")
set.seed(123)
result <- future_map_dfr(1:1000, ~bootstrap_function(.x, dta),
.options = furrr_options(seed = TRUE))
# DR-estimator
point_estimate <- mean(result$dr_est)
point_estimate
se_estimate <- sd(result$dr_est)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with unstabilized weights
point_estimate <- mean(result$ipw_unstab)
point_estimate
se_estimate <- sd(result$ipw_unstab)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with stabilized weights
point_estimate <- mean(result$ipw_stab)
point_estimate
se_estimate <- sd(result$ipw_stab)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
fit_unstab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =unstab_ipw, data = data_boot)
bootstrap_function <- function(sim_id, data) {
rows <- sample(1:dim(data)[1], size = dim(data)[1], replace = TRUE)
data_boot <- data[rows, ]
# fit model for g(L)
fit_qsmk <- glm(qsmk ~ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot, family = binomial)
# get prediction for g(L)
# calculate the predicted probability of qsmk = 1
data_boot$p_qsmk1 <- predict(fit_qsmk, data_boot, type = "response")
# fit model for m1(L) and m0(L)
fit_outcome <- lm(wt82_71  ~ qsmk + qsmk:smokeintensity+ sex + age + I(age^2) + as.factor(race) + as.factor(education) + smokeintensity + I(smokeintensity^2) + smokeyrs + I(smokeyrs^2) + as.factor(active) + as.factor(exercise) + wt71 + I(wt71^2) , data = data_boot,)
# generate prediction where everyone has qsmk = 1 and qsmk 0 respectively
newdata1 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 1)
newdata0 <- data_boot %>% select(-wt82_71) %>% mutate(qsmk = 0)
# get predictions
data_boot$Y_pred1 <- predict(fit_outcome, newdata1)
data_boot$Y_pred0 <- predict(fit_outcome, newdata0)
result <- data_boot %>% mutate(newvar = (qsmk/p_qsmk1 - (1-qsmk)/(1-p_qsmk1)) *(wt82_71 -Y_pred1*qsmk - Y_pred0*(1-qsmk)) + Y_pred1 - Y_pred0) %>%
summarise(dr_est = mean(newvar))
dr_est <- result
# get doubly-robust estimator
p <- mean(data_boot$qsmk)
data_boot$unstab_ipw <- ifelse(data_boot$qsmk == 1, 1/data_boot$p_qsmk1, 1/(1-data_boot$p_qsmk1))
data_boot$stab_ipw <- ifelse(data_boot$qsmk == 1, p/data_boot$p_qsmk1, (1-p)/(1-data_boot$p_qsmk1))
# get IPW estimators using stabilized weights and unstabilized weights
# unstabilized ipw
fit_unstab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =unstab_ipw, data = data_boot)
ipw_unstab <- coef(fit_unstab)["qsmk"]
# stabilized ipw
fit_stab <-glm(wt82_71 ~ qsmk, family = "gaussian",
weights =stab_ipw, data = data_boot)
ipw_stab <- coef(fit_stab)["qsmk"]
data.frame(dr_est = dr_est, ipw_unstab = ipw_unstab, ipw_stab = ipw_stab) %>%
return()
}
library(furrr)
plan("multisession")
set.seed(123)
result <- future_map_dfr(1:1000, ~bootstrap_function(.x, dta),
.options = furrr_options(seed = TRUE))
# DR-estimator
point_estimate <- mean(result$dr_est)
point_estimate
se_estimate <- sd(result$dr_est)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with unstabilized weights
point_estimate <- mean(result$ipw_unstab)
point_estimate
se_estimate <- sd(result$ipw_unstab)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
# IPW-estimator with stabilized weights
point_estimate <- mean(result$ipw_stab)
point_estimate
se_estimate <- sd(result$ipw_stab)
se_estimate
low_ci <- point_estimate - 1.96*se_estimate
up_ci <- point_estimate + 1.96*se_estimate
c(low_ci, up_ci)
